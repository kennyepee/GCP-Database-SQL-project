1.Show the subject names of books supplied by *supplier2*
select Subjects.CategoryName
from ((Subjects
INNER JOIN Books ON Subjects.SubjectID = Books.SubjectID)
INNER JOIN Suppliers on Books.SupplierID = Suppliers.SupplierID) WHERE Suppliers.CompanyName = 'supplier2';

2.Show the name and price of the most expensive book supplied by *supplier3*.
select Books.Title, Books.UnitPrice 
from (Books
INNER JOIN Suppliers ON Books.SupplierID = Suppliers.SupplierID)
WHERE Suppliers.CompanyName = 'supplier3'
GROUP BY Books.Title, Books.UnitPrice
ORDER BY Books.UnitPrice DESC
LIMIT 1;

3.Show the unique names of all books ordered by *lastname1 firstname1*
SELECT DISTINCT Books.Title
from (((Books
INNER JOIN OrderDetails ON Books.BookID = OrderDetails.BookID)
INNER JOIN Orders ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
WHERE
Customers.LastName = 'lastname1' AND Customers.FirstName = 'firstname1';

4. Show the title of books which have more than 10 units in stock
select Title from Books
where Quantity > 10;

5. Show the total price *lastname1 firstname1* has paid for the books
SELECT Customers.FirstName, Customers.LastName, SUM(Books.UnitPrice) AS TotalPaid
from (((Books
INNER JOIN OrderDetails ON Books.BookID = OrderDetails.BookID)
INNER JOIN Orders ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
WHERE
Customers.LastName = 'lastname1' AND Customers.FirstName = 'firstname1'
GROUP BY Customers.FirstName, Customers.LastName;

6. Show the names of the customers who have paid less than $80 in totals
SELECT
Customers.FirstName, Customers.LastName, SUM(Books.UnitPrice * OrderDetails.Quantity) AS TotalOrder
from (((Customers
INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID)
INNER JOIN OrderDetails ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Books ON OrderDetails.BookID = Books.BookID)
GROUP BY Customers.FirstName, Customers.LastName
HAVING TotalOrder < '80';

7. Show the total price each customer paid and their names. List the result in descending price
SELECT
Customers.FirstName, Customers.LastName, SUM(Books.UnitPrice * OrderDetails.Quantity) AS TotalOrder
from (((Customers
INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID)
INNER JOIN OrderDetails ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Books ON OrderDetails.BookID = Books.BookID)
GROUP BY Customers.FirstName, Customers.LastName
ORDER BY TotalOrder DESC;


8. Show the names of all the books shipped on 08/04/2016 and their shippers' names

Select Books.Title, Shippers.ShipperName
from (((Books
INNER JOIN OrderDetails ON Books.BookID = OrderDetails.BookID)
INNER JOIN Orders ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID)
WHERE
Orders.ShippedDate = '2016-08-04 00:00:00' AND '2016-08-04 23:59:59';

9. Show the names of all the ordered books and their total quantities. List the result in ascending quantity
SELECT Books.Title, SUM(OrderDetails.Quantity) AS TotalOrdered
FROM (Books
INNER JOIN OrderDetails ON Books.BookID = OrderDetails.BookID)
GROUP BY Books.Title
ORDER BY TotalOrdered ASC;

10. Show the names of the customers who ordered at least 2 books
SELECT
DISTINCT Customers.FirstName, Customers.LastName, SUM(OrderDetails.Quantity) AS TotalOrdered
from (((Customers
INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID)
INNER JOIN OrderDetails ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Books ON OrderDetails.BookID = Books.BookID)
GROUP BY Customers.FirstName, Customers.LastName
HAVING TotalOrdered >= '2';

11. Show the name of the customers who have ordered at least a book in *category3* or *category4* and the book names.
SELECT
DISTINCT Customers.FirstName, Customers.LastName
from ((((Customers
INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID)
INNER JOIN OrderDetails ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Books ON OrderDetails.BookID = Books.BookID)
INNER JOIN Subjects ON Books.SubjectID = Subjects.SubjectID)
WHERE Subjects.CategoryName = 'category3' OR Subjects.CategoryName = 'category4';

12. Show the name of the customer who has ordered at least one book written by *author1*
SELECT
DISTINCT Customers.FirstName, Customers.LastName
from (((Customers
INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID)
INNER JOIN OrderDetails ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Books ON OrderDetails.BookID = Books.BookID)
WHERE Books.Author = 'author1';

13.Show the name and total sale (price of orders) of each employee
SELECT
Employees.FirstName, Employees.LastName, SUM(Books.UnitPrice * OrderDetails.Quantity) AS TotalSales
from (((Employees
INNER JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID)
INNER JOIN OrderDetails ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Books ON OrderDetails.BookID = Books.BookID)
GROUP BY Employees.FirstName, Employees.LastName
Order BY  TotalSales DESC;

14. Show the names of customers who have ordered more than 1 book and the corresponding quantities. List the result in the descending
quantity
SELECT
Customers.FirstName, Customers.LastName, OrderDetails.Quantity
from (((Customers
INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID)
INNER JOIN OrderDetails ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Books ON OrderDetails.BookID = Books.BookID)
WHERE OrderDetails.Quantity > '1'
GROUP BY Customers.FirstName, Customers.LastName, OrderDetails.Quantity
Order BY  OrderDetails.Quantity DESC;

15.Show the names of customers who have ordered more than 3 books and their respective telephone numbers
SELECT
DISTINCT Customers.FirstName, Customers.LastName, Customers.Phone, SUM(OrderDetails.Quantity) AS Quantities
from (((Customers
INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID)
INNER JOIN OrderDetails ON OrderDetails.OrderID = Orders.OrderID)
INNER JOIN Books ON OrderDetails.BookID = Books.BookID)
GROUP BY Customers.FirstName, Customers.LastName, Customers.Phone
HAVING Quantities > '3'
Order BY  Quantities DESC;